import 'dart:async';
import 'package:invoiceninja_flutter/data/models/stub_model.dart';
import 'package:redux/redux.dart';
import 'package:invoiceninja_flutter/ui/design/design_presenter.dart';
import 'package:invoiceninja_flutter/redux/app/app_actions.dart';
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_redux/flutter_redux.dart';
import 'package:built_collection/built_collection.dart';
import 'package:invoiceninja_flutter/redux/ui/list_ui_state.dart';
import 'package:invoiceninja_flutter/utils/completers.dart';
import 'package:invoiceninja_flutter/utils/localization.dart';
import 'package:invoiceninja_flutter/redux/stub/stub_selectors.dart';
import 'package:invoiceninja_flutter/data/models/models.dart';
import 'package:invoiceninja_flutter/redux/app/app_state.dart';
import 'package:invoiceninja_flutter/redux/stub/stub_actions.dart';

class StubListBuilder extends StatelessWidget {
  const StubListBuilder({Key key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return StoreConnector<AppState, StubListVM>(
      converter: StubListVM.fromStore,
      builder: (context, viewModel) {
        return EntityList(
            isLoaded: viewModel.isLoaded,
            entityType: EntityType.stub,
            presenter: StubPresenter(),
            state: viewModel.state,
            entityList: viewModel.stubList,
            onEntityTap: viewModel.onStubTap,
            tableColumns: viewModel.tableColumns,
            onRefreshed: viewModel.onRefreshed,
            onClearEntityFilterPressed: viewModel.onClearEntityFilterPressed,
            onViewEntityFilterPressed: viewModel.onViewEntityFilterPressed,
            onSortColumn: viewModel.onSortColumn,
            itemBuilder: (BuildContext context, index) {
              final state = viewModel.state;
              final stubId = viewModel.stubList[index];
              final stub = viewModel.stubMap[stubId];
              final listState = state.getListState(EntityType.stub);
              final isInMultiselect = listState.isInMultiselect();

              return StubListItem(
                user: viewModel.state.user,
                filter: viewModel.filter,
                stub: stub,
                onEntityAction: (EntityAction action) {
                  if (action == EntityAction.more) {
                    showEntityActionsDialog(
                      entities: [stub],
                      context: context,
                    );
                  } else {
                    handleStubAction(context, [stub], action);
                  }
                },
                onTap: () => viewModel.onStubTap(context, stub),
                onLongPress: () async {
                  final longPressIsSelection =
                      state.prefState.longPressSelectionIsDefault ?? true;
                  if (longPressIsSelection && !isInMultiselect) {
                    handleStubAction(
                        context, [stub], EntityAction.toggleMultiselect);
                  } else {
                    showEntityActionsDialog(
                      entities: [stub],
                      context: context,
                    );
                  }
                },
                isChecked: isInMultiselect && listState.isSelected(stub.id),
              );
            });
      },
    );
  }
}

class StubListVM {
  StubListVM({
    @required this.state,
    @required this.userCompany,
    @required this.stubList,
    @required this.stubMap,
    @required this.filter,
    @required this.isLoading,
    @required this.isLoaded,
    @required this.onStubTap,
    @required this.listState,
    @required this.onRefreshed,
    @required this.onEntityAction,
    @required this.tableColumns,
    @required this.onClearEntityFilterPressed,
    @required this.onViewEntityFilterPressed,
    @required this.onSortColumn,
  });

  static StubListVM fromStore(Store<AppState> store) {
    Future<Null> _handleRefresh(BuildContext context) {
      if (store.state.isLoading) {
        return Future<Null>(null);
      }
      final completer = snackBarCompleter<Null>(
          context, AppLocalization.of(context).refreshComplete);
      store.dispatch(LoadStubs(completer: completer, force: true));
      return completer.future;
    }

    final state = store.state;

    return StubListVM(
        state: state,
        userCompany: state.userCompany,
        listState: state.stubListState,
        stubList: memoizedFilteredStubList(state.stubState.map,
            state.stubState.list, state.stubListState),
        stubMap: state.stubState.map,
        isLoading: state.isLoading,
        isLoaded: state.stubState.isLoaded,
        filter: state.stubUIState.listUIState.filter,
          onClearEntityFilterPressed: () =>
              store.dispatch(FilterStubsByEntity()),
      onViewEntityFilterPressed: (BuildContext context) => viewEntityById(
          context: context,
          entityId: state.stubListState.filterEntityId,
          entityType: state.stubListState.filterEntityType),
        onStubTap: (context, stub) {
          if (store.state.stubListState.isInMultiselect()) {
            handleStubAction(
                context, [stub], EntityAction.toggleMultiselect);
          } else {
            viewEntity(context: context, entity: stub);
          }
        },
      onEntityAction:
          (BuildContext context, List<BaseEntity> stubs, EntityAction action) =>
          handleStubAction(context, stubs, action),
        onRefreshed: (context) => _handleRefresh(context),
        tableColumns: StubPresenter.getTableFields(state.userCompany),
        onSortColumn: (field) => store.dispatch(SortStubs(field)),
    );
  }

  final AppState state;
  final UserCompanyEntity userCompany;
  final List<String> stubList;
  final BuiltMap<String, StubEntity> stubMap;
  final ListUIState listState;
  final String filter;
  final bool isLoading;
  final bool isLoaded;
  final Function(BuildContext, BaseEntity) onStubTap;
  final Function(BuildContext) onRefreshed;
  final Function(BuildContext, List<BaseEntity>, EntityAction) onEntityAction;
  final Function onClearEntityFilterPressed;
  final Function(BuildContext) onViewEntityFilterPressed;
  final List<String> tableColumns;
  final Function(String) onSortColumn;
}
