import 'package:invoiceninja_flutter/data/models/stub_model.dart';
import 'package:memoize/memoize.dart';
import 'package:built_collection/built_collection.dart';
import 'package:invoiceninja_flutter/data/models/models.dart';
import 'package:invoiceninja_flutter/redux/ui/list_ui_state.dart';

var memoizedDropdownStubList = memo3(
    (BuiltMap<String, StubEntity> stubMap, BuiltList<String> stubList,
            String clientId) =>
        dropdownStubsSelector(stubMap, stubList, clientId));

List<String> dropdownStubsSelector(BuiltMap<String, StubEntity> stubMap,
    BuiltList<String> stubList, String clientId) {
  final list = stubList.where((stubId) {
    final stub = stubMap[stubId];
    /*
    if (clientId != null && clientId > 0 && stub.clientId != clientId) {
      return false;
    }
    */
    return stub.isActive;
  }).toList();

  list.sort((stubAId, stubBId) {
    final stubA = stubMap[stubAId];
    final stubB = stubMap[stubBId];
    return stubA.compareTo(stubB, StubFields.name, true);
  });

  return list;
}

var memoizedFilteredStubList = memo3((BuiltMap<String, StubEntity> stubMap,
        BuiltList<String> stubList, ListUIState stubListState) =>
    filteredStubsSelector(stubMap, stubList, stubListState));

List<String> filteredStubsSelector(BuiltMap<String, StubEntity> stubMap,
    BuiltList<String> stubList, ListUIState stubListState) {
  final list = stubList.where((stubId) {
    final stub = stubMap[stubId];
    if (stubListState.filterEntityId != null &&
        stub.entityId != stubListState.filterEntityId) {
      return false;
    } else {

    }

    if (!stub.matchesStates(stubListState.stateFilters)) {
      return false;
    }
    if (stubListState.custom1Filters.isNotEmpty &&
        !stubListState.custom1Filters.contains(stub.customValue1)) {
      return false;
    }
    if (stubListState.custom2Filters.isNotEmpty &&
        !stubListState.custom2Filters.contains(stub.customValue2)) {
      return false;
    }
    return stub.matchesFilter(stubListState.filter);
  }).toList();

  list.sort((stubAId, stubBId) {
    final stubA = stubMap[stubAId];
    final stubB = stubMap[stubBId];
    return stubA.compareTo(
        stubB, stubListState.sortField, stubListState.sortAscending);
  });

  return list;
}

bool hasStubChanges(
        StubEntity stub, BuiltMap<String, StubEntity> stubMap) =>
    stub.isNew ? stub.isChanged : stub != stubMap[stub.id];
